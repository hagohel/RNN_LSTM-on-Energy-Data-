# -*- coding: utf-8 -*-
"""RNN_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hiQzkT6QzGvxGBJpQNKnHjJeSGcn6OWf
"""	

#Energy Usage Prediction using RNN LSTM (Recurrent neural networks with Long-short term memory)
from math import sqrt
from sklearn.model_selection import train_test_split
from numpy import concatenate
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from pandas import to_datetime
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.layers import LSTM
from keras.layers import Dense
from matplotlib import pyplot
import io
from keras.layers import Activation
from keras.models import Sequential

def series_to_supevised(data, n_in=1, n_out=1, dropnan=True):
    n = 1 if type(data) is list else data.shape[1]
    dataframe = DataFrame(data)
    cols, names = list(), list()
    
    # input sequence (t-n, ....t-1)
    for i in range(n_in, 0, -1):
        cols.append(dataframe.shift(i))
        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n)]
    # forecast sequence (t, t+1 .... t+n)
    for i in range(0, n_out):
        cols.append(dataframe.shift(-i))
        if i == 0:
            names += [('var%d(t)' % (j+1)) for j in range(n)]
        else:
            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n)]
    
    # Arrange all togather
    agg = concat(cols, axis=1)
    agg.columns = names
    
    # drop rows if needed
    if dropnan:
        agg.dropna(inplace=True)
    return agg

#Load data.csv file into google colab
from google.colab import files 
uploaded = files.upload()

data = read_csv(io.BytesIO(uploaded['data.csv'])) # data is now stored in a Pandas Dataframe
values = data.values #values = values[:100,:]

values[:,0] = to_datetime(values[:,0])

# normalize features
scaler = MinMaxScaler(feature_range=(0,1))
scaled = scaler.fit_transform(values)

# frame as supervised learning
reframed = series_to_supevised(scaled, 1, 1)

# drop columns we don't want to predict
reframed.drop(reframed.columns[[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]], axis=1, inplace=True)
print("reframed: ", reframed.shape, "reframed head: ", reframed.head())

# split into train and test sets
values = reframed.values

X = values[:,:25]
Y = values[:,25]


# Split Data to Train and Test
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size=0.3)

# reshape input to be 3D [samples, timesteps, features]
X_Train = X_Train.reshape((X_Train.shape[0], 1, X_Train.shape[1]))
X_Test = X_Test.reshape((X_Test.shape[0], 1, X_Test.shape[1]))

# Model Framework
model = Sequential()
model.add(LSTM(50, input_shape=(X_Train.shape[1], X_Train.shape[2])))      
model.add(Dense(1))
#model.compile(loss='mse', optimizer='adam')
model.compile(optimizer='rmsprop',loss='mse')
# fit
history = model.fit(X_Train, Y_Train, epochs=70, batch_size=10, validation_data=(X_Test, Y_Test), verbose=2, shuffle=False)

# plot history

pyplot.plot(history.history['loss'], label='Train')
pyplot.plot(history.history['val_loss'], label='Test')
#pyplot.boxplot(X)
pyplot.legend()
pyplot.show()

!rm 'data (3).csv'

!ls -al

!cat data.csv
